{
  "title": "render-variant",
  "text": "A property with the render-variant type is intended for displaying and changing various components within itself. It can be an `array`, a `container` with RenderType = \"container-outer\", or a `container` from a virtual array. When initializing the application, htmlix adds a link to the displayed component in the renderChild field. To change a component, it is enough to call the setProp(\"component-name\") method, or setProp(\"reference-to-container-virtual-array\"). The previous component will become invisible, and the new one will be displayed in this property, if it is a container from a virtual array, then it will be deleted. You can also not only change the component displayed in the property, but also set new values for its properties:\r\n\r\n```\r\nSetprop({ComponentName: \"display component name\", prop1: \"data_property_1\", prop2: \"data_property_2\", etc.}) - if the displayed component is a container. \r\n\r\n Setprop({ComponentName: \"the name of the displayed component\", data: [ { prop1: \"data_property_1\", prop2: \"data_property_2\", etc.}, { prop1: \"data_property_1\", prop2: \"data_property_2\", etc.} ]) - if the displayed component is an array. \r\n```\r\nBy opening a property with the render-variant type in the console, the following fields will be in it:\r\n\r\n* `renderChild` - a reference to the current component displayed in this property;\r\n\r\nThe renderParent field has also been added to the displayed component\r\n\r\n* `renderParent` - a reference to the property in which this component is displayed;\r\n\r\nAlso, a property with the render-variant type has several additional methods: \r\n\r\n\r\n`.render(nameComponent=string)` - displays a component named \"nameComponent\" (used only for displaying components)\r\n\r\n`.renderByContainer(containerLink=container)` - displays a container from a virtual array by reference (used only to display containers from virtual arrays);\r\n\r\n\r\n`.setOrCreateAndRender(objWidthProps)` - changes the displayed component to objWidthProps.ComponentName and sets new property values for it;\r\n\r\n\r\n* objWidthProps is an object with new values for properties, where the object's key names must match the names of the properties to be set, objWidthProps.ComponentName is a mandatory field of the object that contains the name of the displayed component, if the displayed component is a container from a virtual array, the name of the virtual array is specified here. If the displayed component is a regular array, \r\n here you also need to specify the data field - an array with objects whose keys are new properties for containers.\r\n\r\n* if `objWidthProps.ComponentName` is a regular container(RenderType=\"container-outer\") - sets it properties that match the keys in the objWidthProps object,\r\nby calling the `setAllProps(objWidthProps)` method from it and then the `render(objWidthProps.ComponentName) method`;\r\n\r\n\r\n* if `objWidthProps.ComponentName` is a virtual array(RenderType=\"virtual-array\") then it will delete the old displayed container in the property and create a new one from the virtual array by calling the array method `container=ComponentName.add(objWidthProps)` then it will call the method `.renderByContainer(containerLink=container)`,\r\n\r\n* if `objWidthProps.ComponentName` is a regular array(RenderType=\"array\"), displays this array in the property and calls the `reuseAll(objWidthProps.data)` method from it,\r\npassing the `data` array from the `objWidthProps` object with new data for containers.\r\n\r\n\r\n**.setProp(newElement)** - the method will determine the data type and then call the desired method from the above,\r\n* for text .render (switches single containers and arrays newElement=text), \r\n* for a container from a virtual array .renderByContainer(newElement=container);\r\n* for an object with the newElement.ComponentName field present, .setOrCreateAndRender(newElement) will be called\r\n\r\n**.getProp()** - if the displayed element is a container, calls a method from it.getAllProps(), if the displayed element is an array, calls the method method from it.GetAll(),\r\nthereby gets the values of all properties from the displayed element, if passed by the parameter MapObject={key1: \"\", key2: {ke1:\"\"} } `.getProp(MapObject)`,\r\nreturns properties only matching the names with key, so you can get an expanded object with all values properties or with all the necessary property values from the displayed element; \r\n\r\n\r\n**.removeProp()** - removes the component from visibility if it is a container from a virtual array (RenderType == \"container-inner\") removes it;"
}