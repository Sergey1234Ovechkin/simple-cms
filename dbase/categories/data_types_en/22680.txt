{
  "title": " General information",
  "text": "To create any Prop property, you must specify the type of this property in the application description or in the html code.\r\nDuring initialization, the application will determine the type of this property and create a Prop object based on it.\r\nIf the property type is a standard event, such as \"click\", 'mouseup', etc., then an event handler will be attached to it, which must be created\r\nin the method object for this container in the application description.\r\nIf the property type is a custom event, then a handler is created just like for a regular event.\r\nIn event handlers, the `this` operator - points to this particular instance of Prop, and then you can navigate to any other properties relative to this one.\r\n\r\nThe methods `setProp(\"newProp\")`, `getProp()` and `removeProp()` work differently depending on the type of property.\r\n\r\nList of all types:\r\n\r\n* \"text\" - text data;\r\n* \"html\" - html markup;\r\n* \"inputvalue\", \"select\" - form data ;\r\n* \"checkbox\", \"radio\" - checkboxes and radios;\r\n* \"class\" - an array with classes;\r\n* \"render-variant\" - the currently displayed object;\r\n* \"group\" - a group of containers from a virtual array;\r\n* \"group-mix\" - a group of containers from different virtual arrays;\r\n\r\ntype **data** - because in data with the date type after the sign = there are any data, then to create this type after\r\nthe name of the array or container, the name data is written and then any data, for example: data-page-data_name=\"any data\",\r\nhere the data type is defined by property name, it should always start with data after the container name.\r\n\r\nAttributes: 'alt', 'disabled', 'href', 'id', 'src', 'style', 'title'.\r\n\r\nTypes of standard events: 'click', 'keydown', 'dblclick', 'contextmenu', 'selectstart', 'mousewheel', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'mousedown', 'keypress', 'keyup', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'abortion', 'change'.\r\n\r\nthe type **aux** is an auxiliary method [\"`method_name`\", \"aux\"] in the application description is declared in the array of properties - `props`, and also as for the event handler, a method is specified for it in the `methods` object. the `this` in it points to a container or an array (if it is declared in the array properties). It can accept parameters and return a value. In an already created component (container or array), it will be available in the `methods` object of the container or array (it will not be in the `props` object). It can only be declared using the array [\"`method_name`\", \"aux\"], it is not added to the html markup. It is inherited according to the same principle as the usual properties."
}