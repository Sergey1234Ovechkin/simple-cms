{
  "title": "HtmlixRouter ",
  "text": "In Htmlix, you can use the router to update the history, as well as change the displayed components depending on the transmitted url.\r\n\r\nThe router is created in the application instance, in the `.router` field, for this you need to use the `HtmlixRouter(StateMap, routes)' function` which returns\r\nan instance of `HtmlixState` with a new `.router` field. The first parameter of the StateMap is an application description object, routes is an object with a route map, the keys of which\r\nare routes with which the url will be compared in the future when the address changes.\r\n\r\nHow does router work? Before initializing the application and creating all components, the router \"looks\" at the browser url, and compares it with the keys from the `routes` parameter\r\n, then finding a match, adds all components that are not in the 'first' field (with the exception of virtual arrays) to the fetchComponents object (see above #fetchComponents),\r\nso it rebuilds the description applications depending on the current url, those components (with the exception of virtual arrays) for which templates are given at this url,\r\nwe specify in the first field - they will be created immediately after loading the page, and those components for which there are no templates at this address will be added automatically to the fetchComponents object by the router,\r\nthey will be created immediately after loading templates from the templatePath file: \"/static/templates/index.html \".(For synchronous component creation , you can use templateVar, see below # Loading templates from .the js file is templateVar).\r\n\r\nThen, during the operation of the application, we use the router function `this.rootLink.router.setRout(url)` in which we change the url, the router will compare the new url with the keys from the routes parameter\r\nand, finding a match, will change all the components from the `routComponent` field to those that should be on this url. In Html markup, the tags where the display of components will change are marked\r\n`data-router_carts=router`, `data-router_main=\"router\"`, etc. \r\n\r\n\r\nFor example:\r\n\r\n```javascript\r\n\r\nvar routes = {\r\n \r\n [\"/\"]: {\r\n \r\n first: [\"categories\", 'carts', \"menu\", \"home_page\"],\r\n/// the components that are in the html file are specified in this array, the rest will be loaded from the template, asynchronously in the fetch request\r\n \r\n routComponent: {\r\n\r\nrouter_carts: \"carts\", //components corresponding to this router router_main\r\n: \"home_page\"\r\n\r\n},\r\n \r\n templatePath: \"/static/templates/index.html \" // template download folder\r\n},\r\n\r\n[\"/cart/:idCart\"]: { //sign : at the beginning of the word - says that this is a parameter and no comparison is required, only checks its presence at this position\r\n\r\nfirst: [\"categories\", 'cart_single', \"menu\", \"home_page\"], \r\n routComponent: {\r\n router_carts: \"cart_single\",\r\n router_main: \"home_page\",\r\n \r\n },\r\n templatePath: \"/static/templates/index.html\"\r\n },\r\n \r\n [\"/category/:idCategory\"]: { \r\n \r\n first: [\"categories\", 'carts', \"menu\", \"home_page\"], \r\n routComponent: {\r\n \r\n router_carts: \"carts\",\r\n router_main: \"home_page\"\r\n \r\n }, \r\n templatePath: \"/static/templates/index.html\" \r\n }, \r\n \r\n [\"/create/category\"]: {\r\n \r\n first: [\"menu\", \"create_category\"], \r\n routComponent:{ \r\n \r\n router_main: \"create_category\"\r\n }, \r\n templatePath: \"/static/templates/index.html\" \r\n },\r\n\r\n[\"/create/cart/\"]: {\r\n \r\n first: [\"menu\", \"create_cart\"], \r\n routComponent:{ \r\n \r\n router_main: \"create_cart\"\r\n }, \r\n templatePath: \"/static/templates/index.html\" \r\n },\r\n \r\n \r\n}\r\n\r\n\r\n```\r\n\r\n\r\nAbove is a code snippet from <a href=\"https://github.com/SergeyOvechkin/lesson_2.2\">prototype of the SPA online store</a>\r\n\r\nIn it, each key is one of the possible urls for this application. The sign : at the beginning of the word says that this part of the url is a parameter and no comparison is required with it, only its presence at this position is required.\r\nThere is also a * sign at the end of the word, it only says to compare everything up to the asterisk, then it is ignored, for example, if we have several similar addresses `/category1/json/`, `/category2/json/`, etc. we specify in the key `/category*/json/` and create one object for descriptions of the router, so as not to duplicate the code.\r\nThe `*` sign after the slash `/*` says not to take into account everything after the slash, that is, if the route is [\"/category/:categorid/\"], then it can only match with `/category/cat_name/`, but not `/category/cat_name/other/`, and if you put an asterisk after the slash, it will match, since only the presence will be checked, but not the quantity\r\n\r\nFurther:\r\n\r\n* `first` - the names of the components that are in the html markup at this server address to take templates from them. It is used when the application is loaded for the first time.\r\n* `routComponen` - an object with the names of the elements in which the components are switched at this url, for example:\r\n```javascript\r\nroutComponent: { //used in the `.setRout(historyUrl)'\r\n\r\nrouter_carts: \"carts\" method, //will find a div element that has data-router_carts=\"router\" and on this historyUrl will insert the carts\r\nrouter_main component into it: \"home_page\" // similarly, it will find data-router_main=\"router\" and replace everything in it with \"home_page\"\r\n\r\n},\r\n```\r\n\r\nThus, by calling `this.rootLink.router.setRout(historyUrl)` from anywhere, we will not only change the history in the browser, but also change the components displayed at this url in the `routComponent` object,\r\nthe method will compare the passed historyUrl with the key map of the `routes` object and finding a match will change the displayed components in the corresponding elements pages.\r\nIf it does not find a match, it will give an error in the console that the url cannot be found. \r\n\r\n* `templatePath` is the path to the template file for components that do not have templates at this url. It is used when the application is loaded for the first time."
}