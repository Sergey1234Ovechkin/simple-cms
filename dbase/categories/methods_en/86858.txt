{
  "title": "HTMLixArray Array Methods",
  "text": "* `.add(props, insertLocation)` - creates a new container with props properties at the specified position \"insertLocation\" in the array, if you do not specify the position, it will create a container at the end of the array;\r\n\r\n* `.removeIndex(indexArray, widthChild)` - removes several containers from the array, indexArray - an array with container indexes to delete, widthChild - if passed with the parameter whithChild=true also removes child containers located in properties with types: \"group\" and \"render-variant\";\r\n\r\n* `.removeAll( widthChild)` - removes all containers from the array, widthChild - if passed with the parameter whithChild=true also removes child containers located in properties with types: \"group\" and \"render-variant\";\r\n\r\n* `.reuseAll(arrayWithObjects)` - reuses containers already existing in the array, changing their props that match the keys of objects from the arrayWithObjects array, if there are fewer new objects than containers, then removes extra containers, if more, then adds. It can be useful in order not to constantly clear the array, and not to add new containers where this is not required.;\r\n\r\n* `.GetAll(map_Object)` - returns an array of objects whose keys are container properties, and the values are data obtained from the getProp() method, for each property, map_Object is a list of only necessary properties, if not passed, it will receive all properties. It works based on the getAllProps container method;\r\n\r\n* `.order(newOrderArr)` - changes the order of containers in the array and html markup to a new one, newOrderArr is an array with 'old' container indexes in a new order, for example [3,2,0,1];\r\n"
}