{
  "title": "Custom Event methods",
  "text": "Access from anywhere in the application is carried out by the name of the user event: \r\n`this.rootLink.eventProps[\"emiter-event-name\"]`\r\n\r\nAccess from the event listener property is performed by: `this.emiter`\r\n\r\n* `.emit()` - triggers an event for all listeners;\r\n\r\n* `.setEventProp(\"new data\")` - calls an event for all listeners and changes the variable this.rootLink.eventProps[\"emiter-event-name\"].prop to new data,\r\nyou can get new data in the event listener using this.emiter.prop or this.emiter.getEventProp();\r\n\r\n* `.getEventProp()` - gets user event data;\r\n\r\n\r\nListeners of user events can be both container properties and array properties;\r\n\r\nYou can add a behavior to the emitter of a custom event - a method that will be triggered before calling emit for all listeners.\r\n \r\n* the `behavior()` method is added to the event emitter if it returns false the event will not be called, usage example:\r\n\r\n```\r\n eventEmiters: { \r\n\r\n //event for changing the navigation type\r\n\r\n [\"emiter-navigation-type\"] : {\r\nprop: \"\",\r\n\r\nbehavior: function(){\r\n//if the screen width is less than 600 px, the event will not fire\r\nif(window.innerWidth < 600 && this.prop == \"top-menu\")return false;\r\n \r\n this.rootLink.stateProperties.NAVIGATION_TYPE = this.prop; \r\n return true;\r\n }\r\n \r\n },\r\n},\r\n\r\n```"
}