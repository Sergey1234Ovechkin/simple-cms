{
  "title": "Navigation",
  "text": "* Navigation through properties inside one common container is done using `this.parent` - where this - \r\nindicates the property whose event handler we are in, then `parent` is the parent container. \r\n\r\n* `this.parent.props.name_prop` - this is how you can get from one property in a shared container to another, where props are all the properties of a container.\r\n\r\n\r\n* If the property is located not in a container but in an array, then `parent` - indicates the array in which it is located. \r\n\r\n* You can switch from the array property to the container properties like this: `this.parent.data[container index].props.property_name`. Where data is an array with containers.\r\n\r\n* Get from the container property to the array `this.rootLink.state[this.pathToComponent]` or by calling this.component();\r\n\r\n* Access to any component from anywhere in the application is provided by `this.rootLink.state[\"component name\"]`\r\n\r\n* A component can be either an array or an independent container that is not placed in an array, so calling this.component() in a container that is not placed in an array will return this, and in the container property this.parent;\r\n\r\n* User events are accessed from anywhere using `this.rootLink.eventProps[\"emter-event-name\"]' then getEventProp() or setEventProp(new_prop)\r\n\r\n* Access to the user event from the subscriber method is as follows: `this.emiter` then getEventProp or setEventProp\r\n\r\n* It is also possible to navigate using reduced access methods - see # Reduced access to properties and methods, in the `Advanced Settings' category."
}