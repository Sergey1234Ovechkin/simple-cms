{
  "title": " Creating a virtual array",
  "text": "A virtual array is an array in which there is no reference to an html tag.\r\nIt is needed to create containers not grouped in one html element, but scattered across different properties of the `group` of different containers.\r\n\r\nFor example, we have three containers and each has a property with the type group\r\n\r\n```html\r\n<div data-pages=array>\r\n\r\n <div data-page=\"container\">\r\n <div data-page-some_group=\"group\">\r\n </div>\r\n </div>\r\n <div data-page=\"container\">\r\n <div data-page-some_group=\"group\">\r\n </div>\r\n </div>\r\n <div data-page=\"container\">\r\n <div data-page-some_group=\"group\">\r\n </div>\r\n </div> \r\n</div> \r\n\r\n\r\n```\r\n\r\n```javscript\r\n \r\n var StateMap ={\r\n pages: {\r\n container: \"page\",\r\n props: [\"some_group\"],\r\n methods: {\r\n  \r\n               } \r\n          } \r\n  }\r\n\r\n```\r\n\r\nNow in each property `some_group` we want to put a different number of menu items data-item=\"container\" for example in the first 1, in the second 2, in the third 3\r\nif we use regular arrays, then we will have to create three identical arrays with a different set of data-item=\"item=\"container\" and the same functionality.\r\nIn order not to do this, we will create one virtual array of items and we will distribute its containers among the \"some_group\" properties\r\n\r\nSo the html code will look like this:\r\n\r\n```html\r\n<div data-pages=array>\r\n\r\n <div data-page=\"container\">\r\n <div data-page-some_group=\"group\">\r\n\r\n<div data-item=\"container\" data-item-text=\"text\">text 1</div> <!--added item container -->\r\n\r\n</div>\r\n</div>\r\n <div data-page=\"container\">\r\n <div data-page-some_group=\"group\">\r\n\r\n<div data-item=\"container\" data-item-text=\"text\">text 1</div>\r\n <div data-item=\"container\" data-item-text=\"text\">text 2</div>\r\n\r\n</div>\r\n</div>\r\n <div data-page=\"container\">\r\n <div data-page-some_group=\"group\">\r\n\r\n<div data-item=\"container\" data-item-text=\"text\">text 1</div>\r\n <div data-item=\"container\" data-item-text=\"text\">text 2</div>\r\n <div data-item=\"container\" data-item-text=\"text\">text 3</div>\r\n\r\n</div>\r\n</div> \r\n</div> \r\n\r\n\r\n```\r\n\r\nNow let's add a virtual array of items to the javascript code: \r\n\r\n```javscript\r\n \r\n var StateMap ={\r\n pages: {\r\n container: \"page\",\r\n props: [\"some_group\"],\r\n methods: {\r\n \r\n \r\n               } \r\n },\r\n \r\n virtualArrayComponents: { //object for storing virtual arrays\r\n \r\n items: { //virtual array\r\n container: \"item\", //container of the virtual array\r\n props: [\"text\"],\r\n methods: {\r\n \r\n \r\n                } \r\n           }\r\n } \r\n \r\n }\r\n\r\n```\r\n\r\nNow, by opening an application instance in the console, you can see that we have 6 \"item\" containers in total in the state.items.data array,\r\nand in the some_group property.The groupChild of the first \"page\" container is one, the second is two, and the third is three.\r\n\r\nThus using a property with the type `group` we grouped in three \"page\" containers of the \"pages\" array a different number of \"item\" containers from the 'items' array\r\n\r\nNote that the index of the container in the array is different from the index of the container in the groupId group\r\nNow if we want to remove the container from the group using the .removeFromGroup(groupId) method, it will also be removed from the virtual array.\r\n\r\n**It is important** to place containers in html markup directly in a tag with the `group` type, avoiding any intermediate tags, because during initialization, the application will search only for direct descendants (`this.htmlLink.children`) with the `container` type, and if they are wrapped in another tag, then it will simply he won't find it."
}