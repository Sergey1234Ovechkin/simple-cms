{
  "title": "Inheritance of components",
  "text": "To inherit container properties by another container, you must specify the `container_extend` field: \"`inheriter_name`\". In the parent component, you can also specify the field `share_props`: numb, where numb is the number of properties of the props array that the parent container allows you to inherit.\r\n\r\nUsage example:\r\n\r\n1. Создадим html разметку двух контейнеров: \r\n```\r\n\r\n <div data-test_container=\"контейнер\" class=\"card col-3\" style=\"цвет: красный;\">\r\n \r\n <p data-test_container-main_text=\"текст\">контейнер первый</p>\r\n \r\n \r\n <данные кнопки-test_container-click=\"click\">нажмите </button>\r\n деленья\r\n \r\n \r\n <div data-test_container_2=\"контейнер\" class=\"card col-3\" style=\"цвет: красный; верхнее поле: 10 пикселей;\">\r\n \r\n <p data-test_container_2-main_text=\"текст\">контейнер второй</p>\r\n \r\n <p data-test_container_2-text2=\"текст\">нажмите там...</p>\r\n \r\n <данные кнопки-test_container_2-click=\"click\">нажмите </button>\r\n деленья\r\n\r\n```\r\nIn the html markup of the second container, which inherits the properties of the first, there must be all inherited properties of the first container with the same names.\r\n\r\n2. Next, create a description of the application:\r\n```\r\nvar StateMap = {\r\n\r\ntest_container: {\r\n\r\ncontainer: \"test_container\",\r\n\r\n/// share_props - allows to inherit only the first two properties \"main_text\" and \"click\"\r\n///if not specified, it will be possible to inherit all properties\r\n share_props: 2,\r\n props: [ \"main_text\", [\"click\", \"click\", \"button:first-of-type\"], [\"hover\", \"mouseover\", \"\"] ],\r\n methods: {\r\n \r\n click: function(){\r\n\r\nvar text = this.parent.props.main_text.getProp();\r\n\r\nthis.parent.props.main_text.setProp(text + \"1\");\r\n\r\n           },\r\nhover: function(){ //this property will not be inherited because its number is in the array = 3, and we inherit only the first two\r\n \r\n var text = this.parent.props.main_text.getProp();\r\n \r\n this.parent.props.main_text.setProp(text + \" 2\");\r\n \r\n           }\r\n   }, \r\n },\r\n test_container_2: {\r\n\r\n///inherits the properties of the test_container component container,\r\n//here you specify the name of the component from whose container the properties will be inherited, \r\n //if it was a container from a virtual or regular array, you need to specify the name of the array\r\n container_extend: \"test_container\",\r\n\r\n///and adds two of its \"text2\", ['click2'\r\n props: [\"text2\", ['click2', \"click\", \"[data-test_container_2-text2='text']\"] ],\r\n methods: {\r\n \r\n click2: function(){\r\n\r\nvar text = this.parent.props.main_text.getProp(); ///in the new method, we access the main_text property that we inherited from the test_container container\r\n \r\n this.parent.props.main_text.setProp(text + \" 2\"); \r\n \r\n \r\n            }\r\n\r\n }, \r\n },\r\n \r\n\r\n}\r\n\r\n```\r\n\r\nSo in the example above, we inherited the first two properties: \"main_text\" and \"click\" from the `test_container` container and added two new ones: \"text2\" and'click2.\r\n\r\n\r\n`Inheritance restrictions`\r\n\r\nWhen creating an inheritance chain, the inherited components in the application description must be located in the sequence in which\r\nthey inherit properties. For example, if we have three containers and we move the 3rd container that inherits the properties of the 2nd from this list up to position 1, it will not inherit the properties of the first container because it is initialized before the second one in which there are no properties from container 1 yet.\r\n\r\nWhen using fetchComponents, inheriting properties from already inherited components can behave unpredictably, so it's better to load missing templates using stateSettings:{ templateVar: templ,}\r\n\r\nWhen using virtualArrayComponents, it is necessary to take into account that the creation of containers from virtual arrays depends on the creation of group or render-variant properties of parent containers, i.e. initialization of virtual arrays occurs in these properties (or at the very end in the verifiTemplateVarComponents or verifyFetchComponents method if these properties should initially be without child components). Therefore, if a container from a virtual array already inherits the properties of another virtual array, then you can inherit properties from it only if it is the parent of the one that inherits (The one that inherits properties is placed in the group or render-variant property of the one from which it inherits).\r\n\r\nInherited properties are created in the container first, and then their own properties, this must be taken into account when declaring `share_props`."
}