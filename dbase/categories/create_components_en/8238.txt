{
  "title": "Updating an array with different group options",
  "text": "Now let's look at a similar situation, except that instead of different template options, we will display lists from different groups in each element:\r\n\r\nThe initial markup sent by the server at the first download:\r\n\r\n```html\r\n<div class=\"container-fluid\">\r\n <div class=\"row\">\r\n <div class=\"col-12\">\r\n<!---------------------------------> \r\n\r\n <div data-test_array=\"array\" class=\"row\">\r\n\r\n<div data-test_container=\"container\" class=\"card col-3\">\r\n<p data-test_container-main_text=\"text\">container 1</p>\r\n <div data-test_container-test_group=\"group\">\r\n \r\n <div data-group_cont_2=\"container\" style=\"border: 1px solid red\">\r\n <p data-group_cont_2-text=\"text\" data-group_cont_2-style=\"style\" style=\"color: blue;\" > text of option 2 </p>\r\n <p data-group_cont_2-text2=\"text\">additional text1</p>\r\n</div>\r\n<div data-group_cont_2=\"container\" style=\"border: 1px solid red\">\r\n <p data-group_cont_2-text=\"text\" data-group_cont_2-style=\"style\" style=\"color: blue;\" > text of option 2 </p>\r\n <p data-group_cont_2-text2=\"text\">additional text2</p>\r\n</div>\r\n\r\n</div>\r\n</div>\r\n <div data-test_container=\"container\" class=\"card col-3\">\r\n<p data-test_container-main_text=\"text\">container 2</p>\r\n <div data-test_container-test_group=\"group\">\r\n \r\n <div data-group_cont_1=\"container\" style=\"border: 1px solid green\">\r\n <p data-group_cont_1-text=\"text\" data-group_cont_1-style=\"style\" style=\"color: green;\" > text of option 1 </p>\r\n</div>\r\n <div data-group_cont_1=\"container\" style=\"border: 1px solid green\">\r\n <p data-group_cont_1-text=\"text\" data-group_cont_1-style=\"style\" style=\"color: green;\" > text of option 1 </p>\r\n</div>\r\n\r\n \r\n </div>\r\n </div>\r\n \r\n </div>\r\n \r\n <!--------------------------------->\r\n\r\n\r\n</div> \r\n </div>\r\n</div>\r\n```\r\n\r\nApplication Description:\r\n\r\n```javascript\r\n\r\nvar StateMap = {\r\n \r\n test_array: {\r\n \r\n container: \"test_container\",\r\n props: [\"test_group\", \"main_text\"],\r\n methods: {\r\n \r\n \r\n           }, \r\n },\r\n virtualArrayComponents: {\r\n \r\n group_array_1:{\r\n container: \"group_cont_1\",\r\n props: [\"text\", \"style\"],\r\n methods: {\r\n \r\n \r\n              } \r\n },\r\n group_array_2:{\r\n container: \"group_cont_2\",\r\n props: [\"text\", \"style\", \"text2\"],\r\n methods: {\r\n \r\n \r\n            } \r\n        }, \r\n }\r\n \r\n}\r\n\r\nwindow.onload = function(){\r\n \r\n var HM = new HtmlixState(StateMap);\r\n \r\n console.log(HM);\r\n}\r\n```\r\nData from the server that needs to be updated:\r\n\r\n```javascript\r\n\r\n var resp = [\r\n \r\n {main_text: \"Name 1\", test_group: {ComponentName: \"group_array_1\", group:[{text: \"new text 2\", style: \"color: yellow;\"}, {text: \"new text gg\", style: \"color: red;\"} ] } },\r\n {main_text: \"Name 2\", test_group: {ComponentName: \"group_array_2\", group:[{text: \"additional text 3\", text2: \"additional text3\", style: \"color: red;\"} , {text: \"additional text 4\", text2: \"additional text4\", style: \"color: blue;\"} ] } },\r\n {main_text: \"Name 3\", test_group: {ComponentName: \"group_array_1\", group:[{text: \"new text 2\", style: \"color: yellow;\"}, {text: \"new text gg\", style: \"color: red;\"}, {text: \"new text gg\", style: \"color: black;\"} ] } },\r\n {main_text: \"Name 4\", test_group: {ComponentName: \"group_array_2\", group:[{text: \"new text gg\", text2: \"additional text2\", style: \"color:blue;\"} ] } },\r\n \r\n ];\r\n\r\n```\r\n\r\nThe same principle as with render-variant, only now in each test_group property we have an object with two mandatory ComponentName fields - the name of the virtual array and \r\ngroup - an array with objects for each item of the updated group.\r\n\r\n\r\n```javascript\r\n\r\nwindow.setTimeout( function(){ \r\n \r\n HM.state[\"test_array\"].reuseAll(resp);\r\n \r\n \r\n \r\n console.log(HM.state[\"test_array\"].GetAll());\r\n\r\n\r\n//getting data of only necessary properties\r\n console.log(HM.state[\"test_array\"].getAll({main_text: \"\", test_group: {text: \"\", text2: \"\"} }));\r\n \r\n \r\n console.log(HM.state[\"test_array\"].getAll({main_text: \"\", test_group: {componentName: \"\", text: \"\", text2: \"\"} }));\r\n \r\n }, 2000);\r\n\r\n```\r\n* <a href=\"https://github.com/SergeyOvechkin/tests/tree/master/group-variant \"> working code example above </a>\r\n"
}