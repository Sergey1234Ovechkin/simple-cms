{
  "title": "Adding Custom Events",
  "text": "When creating a container in an array, the container gets an index starting from 0 - (for the first container) then when adding new containers, if a new container is added to the beginning of the array at position 0 - the index of all containers following it will increase by 1, when removing the container from the array, on the contrary, the index of all containers following the deleted container will decrease on 1. Let's create a property in each container that will display the index of the container in html markup and call this property `page_index`. Then, when adding or removing containers, we will update this property so that it displays up-to-date data. There are different ways to do this. For example, after each addition or deletion, go through the array in the forEach loop and update the index of all containers. The second way is to attach the listener of the `listener_create_page` event to the container and update the `page_index` property when it occurs, in this example we will do so.\r\n\r\n\r\nLet's add to the html code of the page containers from the example above (#Adding containers to the array) the event property `listener_create_page` with the event name \"emiter-create-page\" and the property `page_index` with the type \"text\":\r\n\r\n\r\n\r\n```html\r\n\r\n<form data-create_page=\"container\" style=\"border: 1px solid blue; padding: 10px; margin: 10px;> <!-- ...unchanged... --> </form>\r\n\r\n<div data-pages=\"array\" style=\"border: 1px solid red; padding: 10px;\"> \r\n \r\n <div data-page=\"container\" data-page-listener_create_page=\"emiter-create-page\" style=\"border: 1px solid green\">\r\n<!-- added the event listener property \"emiter-create-page\" -->\r\n\r\n<p data-page-paragraph=\"text\" data-page-my_class=\"class\">text<p>\r\n \r\n <p>index= <span data-page-page_index=\"text\" > 0</span> </p>\r\n<!-- added the page_index property to display changing data -->\r\n\r\n<button data-page-btn_click=\"click\">Button</button> \r\n <button data-page-remove=\"click\">Delete</button> \r\n \r\n </div>\r\n<!-- similarly for the second container -->\r\n <div data-page=\"container\" data-page-listener_create_page=\"emiter-create-page\" style=\"border: 1px solid green\">\r\n\r\n<p data-page-paragraph=\"text\" data-page-my_class=\"class\">text<p> \r\n <p>index= <span data-page-page_index=\"text\" > 1</span> </p> \r\n <button data-page-btn_click=\"click\">Button</button> \r\n <button data-page-remove=\"click\">Delete</button>\r\n \r\n </div>\r\n</div> \r\n \r\n```\r\n\r\nNow let's change the description of the application:\r\n\r\n\r\n```javascript\r\n\r\nvar StateMap = {\r\n \r\n create_page: { \r\n container: \"create_page\", \r\n props: [\"text\", \"create\"], \r\n methods: {\r\n create: function(){ \r\n \r\n event.preventDefault(); \r\n \r\n var text = this.parent.props.text.getProp(); \r\n \r\n this.rootLink.state[\"pages\"].add({paragraph: text}, 0); //add the container to the beginning of the array, respectively, the index of all others increases by 1 \r\n \r\n this.rootLink.eventProps[\"emiter-create-page\"].emit();\r\n//triggered a custom \"emiter-create-page\" event when creating the container \r\n                 } \r\n         }\r\n },\r\n\r\n pages: { \r\n container: \"page\", \r\n //added properties \"page_index\" and \"listener_create_page\"\r\nprops: [\"paragraf\", \"my_class\", \"btn_click\", \"remove\", \"page_index\", \"listener_create_page\"],\r\nmethods: { \r\n \r\n btn_click: function(){ \r\n \r\n console.log(this); \r\n this.parent.props.paragraph.setProp(\"New text\"); \r\n this.parent.props.my_class.setProp(\"new_class\");\r\n\r\n},\r\nremove: function(){\r\n\r\nthis.parent.remove(); //deleted the container, respectively, the index of containers following it decreased by 1 \r\n this.rootLink.eventProps[\"emiter-create-page\"].emit();\r\n//triggered a custom \"emiter-create-page\" event when deleting a container\r\n \r\n },\r\n// added an event handler \"emiter-create-page\" for the listener_create_page property of all listener_create_page containers\r\n: function(){\r\n\r\nthis.parent.props.page_index.setProp( this.parent.index );\r\n //updated the interface of all containers based on the changing index \r\n                }\r\n          } \r\n },\r\n eventEmiters: { //created an object with all user events of the application\r\n\r\n[\"emiter-create-page\"]: { //our event with initial data\r\n \r\n prop: \"\",\r\n                                     }\r\n                        }\r\n}\r\n```\r\n\r\nSo after each creation or deletion of the page container, we call the \"emiter-create-page\" event and all subscribers update their data.\r\nNow if you create a new container, it will get an index equal to 2, and then delete the null container with index 0, then the container we created will change the index from 2 to 1 and we will update its interface using a custom event.\r\nYou can also pass new data to a custom event, which will then be received by all listeners in the event handlers `this.emiter.prop'\r\n\r\nYou can read more about working with user events in the section \"lessons\" - Working with user events"
}