{
  "title": "Creating an array",
  "text": "Now let's put our container in an array and also add a delete button to the container.\r\n\r\n\r\n```html\r\n<div data-pages=\"array\" style=\"border: 1px solid red; padding: 10px;\">\r\n<!-- created an array of pages and placed two identical page containers in it --> \r\n \r\n <div data-page=\"container\" style=\"border: 1px solid green\"> \r\n\r\n <p data-page-paragraph=\"text\" data-page-my_class=\"class\">text<p>\r\n <button data-page-btn_click=\"click\">Button</button> \r\n \r\n <button data-page-remove=\"click\">Delete</button> \r\n <!-- added a delete button for the page container and placed the \"remove\" property in it -->\r\n\r\n</div>\r\n <div data-page=\"container\" style=\"border: 1px solid green\"> \r\n\r\n <p data-page-paragraph=\"text\" data-page-my_class=\"class\">text<p>\r\n <button data-page-btn_click=\"click\">Button</button> \r\n \r\n <button data-page-remove=\"click\">Delete</button>\r\n \r\n </div>\r\n\r\n</div> \r\n \r\n```\r\n\r\nNow let's change the description of the application:\r\n\r\n```javascript\r\n\r\nvar StateMap = {\r\n\r\n pages: { //the component is now called pages \r\n\r\ncontainer: \"page\", //container names have not changed\r\n \r\n \r\n props: [\"paragraph\", \"my_class\", \"btn_click\", \"remove\"], //added the \"remove\"\r\nmethods property: { \r\n \r\n btn_click: function(){ \r\n \r\n console.log(this); \r\n this.parent.props.paragraph.setProp(\"New text\"); \r\n this.parent.props.my_class.setProp(\"new_class\");\r\n\r\n},\r\nremove: function(){ //event handler for the \"remove\" property\r\n\r\nthis.parent.remove(); //access the container from the property, and then delete the container\r\n\r\n                  }\r\n          }\r\n      }\r\n}\r\n```\r\n\r\nSo after we placed the container in the pages array, the component took the name of the array, and the names for the containers remained the same.\r\nAlso now the container can be deleted because it is in the array."
}